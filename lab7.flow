import string;
import lingo/pegcode/driver;
import ds/hashmap;
import math/hash;
import math/math;

Exp ::= Sum, Sub, Mult, Div, Var, Neg, Rat;
  Sum(base : Exp, arr : [Exp]);
  Sub(base : Exp, arr : [Exp]);
  Mult(base : Exp, arr : [Exp]);
  Div(base : Exp, arr : [Exp]);
  Var(val : string);
  Neg(val : Rat);
  Rat(val1 : int, val2 : int);

str2exp(str : string) -> Exp {
  my_grammar : string = "#include labs/lab7.lingo";
  parsic(compilePegGrammar(my_grammar), str, defaultPegActions);
}

simplify(value : Rat) -> Rat {
    nod = gcd(value.val1, value.val2);
    Rat(value.val1 / nod, value.val2 / nod);
}

exp2str(exp : Exp, vars : HashMap<string, string>, is_priority_op : bool) -> string {
  switch (exp) {
    Sum(base, arr):
        if (is_priority_op) {
            "(" + exp2str(base, vars, false) + " + " + strGlue(map(arr, \i -> exp2str(i, vars, false)), " + ") + ")";
        } else {
            exp2str(base, vars, false) + " + " + strGlue(map(arr, \i -> exp2str(i, vars, false)), " + ");
        }
    Sub(base, arr):
        if (is_priority_op) {
            "(" + exp2str(base, vars, false) + " - " + strGlue(map(arr, \i -> exp2str(i, vars, false)), " - ") + ")";
        } else {
            exp2str(base, vars, false) + " - " + strGlue(map(arr, \i -> exp2str(i, vars, false)), " - ");
        }
    Mult(base, arr): exp2str(base, vars, true) + " * " + strGlue(map(arr, \i -> exp2str(i, vars, true)), " * ");
    Div(base, arr): exp2str(base, vars, true) + " / " + strGlue(map(arr, \i -> exp2str(i, vars, true)), " / ");
    Var(val): {
        value = lookupHashMap(vars, val);
        switch (value) {
            Some(x): x;
            None(): {
                println("Incorrect expression");
                "0.0";
            };
        }
    }
    Rat(val1, val2):
        if (val2 == 1) {
            i2s(val1);
        } else {
            res = simplify(exp);
            i2s(res.val1) + "/" + i2s(res.val2);
        }
    Neg(val): "-" + exp2str(val, vars, false);
  }
}

sumRat(left : Rat, right : Rat) -> Rat {
    nok = lcm(left.val2, right.val2);
    Rat(left.val1 * (nok / left.val2) + right.val1 * (nok / right.val2), nok);
}

subRat(left : Rat, right : Rat) -> Rat {
    nok = lcm(left.val2, right.val2);
    Rat(left.val1 * (nok / left.val2) - right.val1 * (nok / right.val2), nok);
}

mulRat(left : Rat, right : Rat) -> Rat {
    Rat(left.val1 * right.val1, left.val2 * right.val2);
}

divRat(left : Rat, right : Rat) -> Rat {
    Rat(left.val1 * right.val2, left.val2 * right.val1);
}

calcExp(exp : Exp, vars : HashMap<string, string>) -> Rat {
  switch(exp) {
    Sum(base, arr):
        simplify(fold(map(arr, \i -> calcExp(i, vars)), calcExp(base, vars), \i, j -> sumRat(i, j)));
    Sub(base, arr):
        simplify(fold(map(arr, \i -> calcExp(i, vars)), calcExp(base, vars), \i, j -> subRat(i, j)));
    Mult(base, arr):
        simplify(fold(map(arr, \i -> calcExp(i, vars)), calcExp(base, vars), \i, j -> mulRat(i, j)));
    Div(base, arr):
        simplify(fold(map(arr, \i -> calcExp(i, vars)), calcExp(base, vars), \i, j -> divRat(i, j)));
    Var(val): {
        value = lookupHashMap(vars, val);
        switch (value) {
            Some(x): {
                expr = str2exp(x);
                calcExp(expr, makeHashMap(fastHashString));
            }
            None(): {
                println("Incorrect expression");
                Rat(0, 0);
            }
        }
    }
    Neg(val): {
        rat = calcExp(val, vars);
        Rat(rat.val1 * (-1), rat.val2);
    }
    Rat(val1, val2): simplify(Rat(val1, val2));
  }
}

printRat(value : Rat) -> void {
    if (value.val2 == 1) {
        println(value.val1);
    } else {
        println(i2s(value.val1) + "/" + i2s(value.val2));
    }
}

main() {
    vars = makeHashMap(fastHashString);
    setHashMap(vars, "b", "1/4");

    test1 = "9/3 + 1/3 + 1/3";
    test2 = "1/3 + 1/3 + b";
    test3 = "1/3 * 1/3 + 1/3";
    test4 = "1/3 * (1/3 + 1/3)";
    test5 = "1/3 / 1/3 / 2/3";
    test6 = "1/3 - 1/3 - 1/4";
    test7 = "-1/3 + 1/3 + 1/4";
    test8 = "1/3 * (-1/3) + 1/4";

    exp1 = str2exp(test1);
    exp2 = str2exp(test2);
    exp3 = str2exp(test3);
    exp4 = str2exp(test4);
    exp5 = str2exp(test5);
    exp6 = str2exp(test6);
    exp7 = str2exp(test7);
    exp8 = str2exp(test8);

    println("String to expression:");

    println(exp1);
    println(exp2);
    println(exp3);
    println(exp4);
    println(exp5);
    println(exp6);
    println(exp7);
    println(exp8);

    println("Expression to string:");

    println(exp2str(exp1, vars, false));
    println(exp2str(exp2, vars, false));
    println(exp2str(exp3, vars, false));
    println(exp2str(exp4, vars, false));
    println(exp2str(exp5, vars, false));
    println(exp2str(exp6, vars, false));
    println(exp2str(exp7, vars, false));
    println(exp2str(exp8, vars, false));

    println("Result:");

    printRat(calcExp(exp1, vars));
    printRat(calcExp(exp2, vars));
    printRat(calcExp(exp3, vars));
    printRat(calcExp(exp4, vars));
    printRat(calcExp(exp5, vars));
    printRat(calcExp(exp6, vars));
    printRat(calcExp(exp7, vars));
    printRat(calcExp(exp8, vars));
}
