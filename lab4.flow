import ds/array;
import ds/tree;
import string;

indsH(a: [int], m: int, i: int, j: int, l: int, result: [Pair<int, int>]) -> [Pair<int, int>] {
	if (l == i) {
		result;
	} else if (l == j) {
		indsH(a, m, i + 1, 0, l, result);
	} else if (a[i] + a[j] == m && i != j) {
		indsH(a, m, i, j + 1, l, arrayPush(result, Pair(i, j)));
	} else {
		indsH(a, m, i, j + 1, l, result);
	}
}

indsR(a: [int], m: int) -> [Pair<int, int>] {
	indsH(a, m, 0, 0, length(a), []);
}

createTree(a: [int]) -> Tree<int, [int]> {
	foldi(a, makeTree(), \index, tree, value -> treePushToArrayValue(tree, value, index));
}

indsT1(a: [int], tree: Tree<int, [int]>, m: int, l: int, i: int, result: [Pair<int, int>]) -> [Pair<int, int>] {
	foldi(a, result, \index, pairArr, value -> concat(pairArr, map(lookupTreeDef(tree, m - value, []), \j -> Pair(index, j))));
}

indsT(a: [int], m: int) -> [Pair<int, int>] {
	tree = createTree(a);
	indsT1(a, tree, m, length(a), 0, []);
}

main() {
	arr : [int] = [1, 3, 3, 6, 4];
	println(indsT(arr, 7));
	println(indsR(arr, 7));
}