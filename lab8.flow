import string;
import lingo/pegcode/driver;
import ds/hashmap;
import math/hash;

Exp ::= Sum, Sub, Mult, Div, Var, Neg, Rat;
  Sum(base : Exp, arr : [Exp]);
  Sub(base : Exp, arr : [Exp]);
  Mult(base : Exp, arr : [Exp]);
  Div(base : Exp, arr : [Exp]);
  Var(val : string);
  Neg(val : Rat);
  Rat(val1 : int, val2 : int);

str2exp(str : string) -> Exp {
  my_grammar : string = "#include labs/lab8.lingo";
  parsic(compilePegGrammar(my_grammar), str, defaultPegActions);
}

simplifyRat(value : Rat) -> Rat {
    nod = gcd(value.val1, value.val2);
    Rat(value.val1 / nod, value.val2 / nod);
}

exp2str(exp : Exp, is_priority_op : bool, is_div : bool) -> string {
  switch (exp) {
    Sum(base, arr):
        if (is_priority_op) {
            "(" + exp2str(base, false, false) + " + " + strGlue(map(arr, \i -> exp2str(i, false, false)), " + ") + ")";
        } else {
            exp2str(base, false, false) + " + " + strGlue(map(arr, \i -> exp2str(i, false, false)), " + ");
        }
    Sub(base, arr):
        if (is_priority_op) {
            "(" + exp2str(base, false, false) + " - " + strGlue(map(arr, \i -> exp2str(i, false, false)), " - ") + ")";
        } else {
            exp2str(base, false, false) + " - " + strGlue(map(arr, \i -> exp2str(i, false, false)), " - ");
        }
    Mult(base, arr):
        if (is_div) {
            "(" + exp2str(base, true, false) + " * " + strGlue(map(arr, \i -> exp2str(i, true, false)), " * ") + ")";
        } else {
            exp2str(base, true, false) + " * " + strGlue(map(arr, \i -> exp2str(i, true, false)), " * ");
        }
    Div(base, arr):
        if (is_div) {
            "(" + exp2str(base, true, true) + " / " + strGlue(map(arr, \i -> exp2str(i, true, true)), " / ") + ")";
        } else {
            exp2str(base, true, true) + " / " + strGlue(map(arr, \i -> exp2str(i, true, true)), " / ");
        }
    Var(val): val;
    Rat(val1, val2):
        if (val2 == 1) {
            i2s(val1);
        } else {
            res = simplifyRat(exp);
            i2s(res.val1) + "/" + i2s(res.val2);
        }
    Neg(val): "-" + exp2str(val, false, false);
  }
}

derivate(exp : Exp, var : string) -> Exp {
  switch(exp) {
    Sum(base, arr):
        Sum(derivate(base, var), map(arr, \i -> derivate(i, var)));
    Sub(base, arr):
        Sub(derivate(base, var), map(arr, \i -> derivate(i, var)));
    Mult(base, arr):
        if (length(arr) == 0) {
            derivate(base, var);
        } else {
            new_base = firstElement(arr, Rat(0, 1));
            new_arr = tail(arr);
            Sum(Mult(derivate(base, var), arr), [Mult(derivate(Mult(new_base, new_arr), var), [base])]);
        }
    Div(base, arr):
        if (length(arr) == 0) {
            derivate(base, var);
        } else {
            new_base = firstElement(arr, Rat(0, 1));
            new_arr = tail(arr);
            Div(Sub(Mult(derivate(base, var), [Div(new_base, new_arr)]), [Mult(derivate(Div(new_base, new_arr), var), [base])]), [Mult(Div(new_base, new_arr), [Div(new_base, new_arr)])]);
        }
    Var(val):
        if (val == var) {
            Rat(1, 1);
        } else {
            Rat(0, 1);
        }
    Neg(val): Rat(0, 1);
    Rat(val1, val2): Rat(0, 1);
  }
}

simplify(derivate : Exp) -> Exp {
    switch (derivate) {
        Sum(base, arr): {
            sim_base = simplify(base);
            sim_arr = map(arr, simplify);
            new_sim_arr = fold(sim_arr, [], \i, j -> if (toString(j) != "Rat(0, 1)") { arrayPush(i, j); } else { i; });

            if (length(new_sim_arr) == 0) {
                sim_base;
            } else if (toString(sim_base) == "Rat(0, 1)") {
                new_base = firstElement(new_sim_arr, Rat(0, 1));
                new_arr = tail(new_sim_arr);
                
                if (length(new_arr) == 0) {
                    new_base
                } else {
                    Sum(new_base, new_arr);
                }
            } else {
                Sum(sim_base, new_sim_arr);
            }
        }
        Mult(base, arr): {
            sim_base = simplify(base);
            sim_arr = map(arr, simplify);
            new_sim_arr = fold(sim_arr, [], \i, j -> if (toString(j) != "Rat(1, 1)") { arrayPush(i, j); } else { i; });

            if (fold(sim_arr, 0, \i, j -> if (toString(j) == "Rat(0, 1)") { i + 1; } else { i; }) != 0 || toString(sim_base) == "Rat(0, 1)") {
                Rat(0, 1);
            } else if (length(new_sim_arr) == 0) {
                sim_base;
            } else if (toString(sim_base) == "Rat(1, 1)") {
                new_base = firstElement(new_sim_arr, Rat(0, 1));
                new_arr = tail(new_sim_arr);

                if (length(new_arr) == 0) {
                    new_base
                } else {
                    Mult(new_base, new_arr);
                }
            } else {
                Mult(sim_base, sim_arr);
            }
        }
        Div(base, arr): {
            sim_base = simplify(base);
            sim_arr = map(arr, simplify);
            new_sim_arr = fold(sim_arr, [], \i, j -> if (toString(j) != "Rat(1, 1)") { arrayPush(i, j); } else { i; });

            if (fold(sim_arr, 0, \i, j -> if (toString(j) == "Rat(0, 1)") { i + 1; } else { i; }) != 0) {
                println("error");
                Rat(0, 1);
            } else if (toString(sim_base) == "Rat(0, 1)") {
                Rat(0, 1);
            } else if (length(new_sim_arr) == 0) {
                sim_base;
            } else if (toString(sim_base) == "Rat(1, 1)") {
                new_base = firstElement(new_sim_arr, Rat(0, 1));
                new_arr = tail(new_sim_arr);

                if (length(new_arr) == 0) {
                    new_base
                } else {
                    Div(new_base, new_arr);
                }
            } else {
                Div(sim_base, sim_arr);
            }
        }
        Sub(base, arr): {
            sim_base = simplify(base);
            sim_arr = map(arr, simplify);
            new_sim_arr = fold(sim_arr, [], \i, j -> if (toString(j) != "Rat(0, 1)") { arrayPush(i, j); } else { i; });

            if (length(new_sim_arr) == 0) {
                sim_base;
            } else if (toString(sim_base) == "Rat(0, 1)") {
                new_base = firstElement(new_sim_arr, Rat(0, 1));
                new_arr = tail(new_sim_arr);

                if (length(new_arr) == 0) {
                    new_base
                } else {
                    Sub(new_base, new_arr);
                }
            } else {
                Sub(sim_base, new_sim_arr);
            }
        }
        Rat(val1, val2): Rat(val1, val2);
        Neg(val): Neg(val);
        Var(val): Var(val);
    }
}

main() {
    exp1 = str2exp("1/3 + 2");
    exp2 = str2exp("y + 1");
    exp3 = str2exp("y*y*y + y*y + 1");
    exp4 = str2exp("y*x - 5*y");
    exp5 = str2exp("y/5");
    exp6 = str2exp("y/(x - x)");
    exp7 = str2exp("y/(x - x)/x");
    exp8 = str2exp("y/(x - x)/x/x");

    println("String to expression:");

    println(exp1);
    println(exp2);
    println(exp3);
    println(exp4);
    println(exp5);
    println(exp6);
    println(exp7);
    println(exp8);

    println("Expression to string:");

    println(exp2str(exp1, false, false));
    println(exp2str(exp2, false, false));
    println(exp2str(exp3, false, false));
    println(exp2str(exp4, false, false));
    println(exp2str(exp5, false, false));
    println(exp2str(exp6, false, false));
    println(exp2str(exp7, false, false));
    println(exp2str(exp8, false, false));

    println("Result:");

    println(derivate(exp1, "y"));
    println(derivate(exp2, "y"));
    println(derivate(exp3, "y"));
    println(derivate(exp4, "y"));
    println(derivate(exp5, "y"));
    println(derivate(exp6, "y"));
    println(derivate(exp7, "y"));
    println(derivate(exp8, "y"));

    println("Derivate to string:");

    println(exp2str(derivate(exp1, "y"), false, false));
    println(exp2str(derivate(exp2, "y"), false, false));
    println(exp2str(derivate(exp3, "y"), false, false));
    println(exp2str(derivate(exp4, "y"), false, false));
    println(exp2str(derivate(exp5, "y"), false, false));
    println(exp2str(derivate(exp6, "y"), false, false));
    println(exp2str(derivate(exp7, "y"), false, false));
    println(exp2str(derivate(exp8, "y"), false, false));

    println("Simpilfy result:");

    println(simplify(derivate(exp1, "y")));
    println(simplify(derivate(exp2, "y")));
    println(simplify(derivate(exp3, "y")));
    println(simplify(derivate(exp4, "y")));
    println(simplify(derivate(exp5, "y")));
    println(simplify(derivate(exp6, "y")));
    println(simplify(derivate(exp7, "y")));
    println(simplify(derivate(exp8, "y")));

    println("Simpilfy derivate to string:");

    println(exp2str(simplify(derivate(exp1, "y")), false, false));
    println(exp2str(simplify(derivate(exp2, "y")), false, false));
    println(exp2str(simplify(derivate(exp3, "y")), false, false));
    println(exp2str(simplify(derivate(exp4, "y")), false, false));
    println(exp2str(simplify(derivate(exp5, "y")), false, false));
    println(exp2str(simplify(derivate(exp6, "y")), false, false));
    println(exp2str(simplify(derivate(exp7, "y")), false, false));
    println(exp2str(simplify(derivate(exp8, "y")), false, false));
}