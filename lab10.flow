import string;
import ds/array;
import ds/tree;
import ds/set;
import lingo/pegcode/driver;

BinOperations ::= SumOp, SubOp, MulOp, DivOp;
    SumOp();
    SubOp();
    MulOp();
    DivOp();

Expr ::= Binary, Var, Int, Neg;
    Binary(left: Expr, right: Expr, operation: BinOperations);
    Var(letter: string);
    Int(num: int);
    Neg(e: Expr);

maybeSum = maybeMap2(\l, r -> Binary(l, r, SumOp()));
maybeSub = maybeMap2(\l, r -> Binary(l, r, SubOp()));
maybeMul = maybeMap2(\l, r -> Binary(l, r, MulOp()));
maybeDiv = maybeMap2(\l, r -> Binary(l, r, DivOp()));

MyRule(left: Expr, right: Expr);

applyAllRules(expr: Expr, rules: [MyRule], res: Set<Maybe<Expr>>) -> Set<Maybe<Expr>> {
    initSet : Set<Maybe<Expr>> = makeSet1(Some(expr));
    allForms = switch(expr) {
        Binary(left, right, operation): {
            leftSet = applyAllRules(left, rules, makeSet1(Some(left)));
            rightSet = applyAllRules(right, rules, makeSet1(Some(right)));

            mergeSets(initSet, foldSet(leftSet, makeSet(), \setLeft, leftI ->{
                mergeSets(setLeft, foldSet(rightSet, makeSet(), \setRight, rightI -> {
                    insertSet(setRight, 
                        switch(operation) {
                            SumOp(): maybeSum(leftI, rightI);
                            SubOp(): maybeSub(leftI, rightI);
                            MulOp(): maybeMul(leftI, rightI);
                            DivOp(): maybeDiv(leftI, rightI);
                        }
                    );
                }))
            }));
        }
        Neg(e): {
            set = applyAllRules(e, rules, makeSet1(Some(e)));

            foldSet(set, makeSet(), \setI, i -> {
                insertSet(setI, maybeMap(i, \c -> Neg(c)));
            });
              
            mergeSets(initSet, set);
        }
        Int(num): initSet;
        Var(name): initSet;
    }

    appliedRules = mergeSets(allForms, foldSet(allForms, makeSet(), \setI, exprI ->{
        mergeSets(setI, fold(rules, makeSet(), \setJ, rule -> {
            switch(exprI) {
                None(): setJ;
                Some(a): insertSet(setJ, tryApplyRule(a, rule));
            }
        }));
    }));

    foldSet(differenceSets(appliedRules, res), mergeSets(res, appliedRules), \acc, e -> {
        switch (e) {
            None(): acc;
            Some(a):{
                mergeSets(acc, applyAllRules(a, rules, acc));
            }
        }
    });
}

applyRule(ruleRight: Expr, replacement: Tree) -> Maybe<Expr>{
    switch(ruleRight) {
        Binary(left, right, operation): {
            leftValue = applyRule(left, replacement);
            rightValue = applyRule(right, replacement);

            switch(operation) {
                SumOp(): maybeSum(leftValue, rightValue);
                SubOp(): maybeSub(leftValue, rightValue);
                MulOp(): maybeMul(leftValue, rightValue);
                DivOp(): maybeDiv(leftValue, rightValue);
            }
        }
        Neg(e): {
            val = applyRule(e, replacement);
            maybeMap(val, \c -> Neg(c));
        }
        Int(num): {
            Some(Int(num));
        }
        Var(name): {
            lookupTree(replacement, name);
        }
    }
}

tryApplyRule(expr: Expr, rule: MyRule) -> Maybe<Expr> {
    replacements = compare(expr, rule.left, Some(makeTree()));
    maybeBind(replacements, \repl -> applyRule(rule.right, repl));
}

compare(expr: Expr, ruleLeft: Expr, replacement: Maybe<Tree>) -> Maybe<Tree> {
    switch(ruleLeft) {
        Binary(left, right, operation): {
            switch(expr) {
                Binary(l, r, op): {
                    if (op == operation) {
                        compare(r, right, compare(l, left, replacement));
                    } else {
                        None();
                    }
                }
                default: None();
            }
        }
        Neg(e): {
            switch(expr: Expr) {
                Neg(f): {
                    compare(f, e, replacement);
                }
                default: None();
            }
        }
        Int(num): {
            switch(expr: Expr) {
                Int(num1): {
                    if(num1 == num) {
                        replacement;
                    } else {
                        None();
                    }
                }
                default: None();
            }
        }
        Var(name): {
            arg = maybeBind(replacement, \e -> lookupTree(e, name));

            switch(arg) {
                Some(v): {
                    if(v == expr) {
                        replacement;
                    } else {
                        None();
                    }
                }
                None(): {
                    maybeMap(replacement, \c -> setTree(c, name, expr));
                }
            }
        }
    }
}

size(expr: Expr) {
    switch(expr) {
        Binary(left, right, op): size(left) + 1 + size(right);
        Neg(e): size(e) + 1;
        Int(num): 1;
        Var(name): 1;
    }
}

simplify(expr: Expr, rules: [MyRule]) -> Expr {
    set = applyAllRules(expr, rules, makeSet1(Some(expr)));
    foldSet(set, expr, \exprI, i -> {
        switch(i) {
            None(): exprI;
            Some(a): {
                if(size(a) > size(exprI)) {
                    exprI;
                } else {
                    a;
                }
            }
        }
    });
}

expr2str(expr: Expr, is_mul: bool, is_div: bool) -> string {
    switch(expr) {
        Int(value): i2s(value);
        Var(name): name;
        Neg(value): "(-" + expr2str(value, false, false) + ")";
        Binary(left, right, op): {
            switch(op) {
                SumOp():
                    if (is_mul || is_div) {
                        "(" + expr2str(left, false, false) + " + " + expr2str(right, false, false) + ")";
                    } else {
                        expr2str(left, false, false) + " + " + expr2str(right, false, false);
                    }
                SubOp():
                    if (is_mul || is_div) {
                        "(" + expr2str(left, false, false) + " - " + expr2str(right, false, false) + ")";
                    } else {
                        expr2str(left, false, false) + " - " + expr2str(right, false, false);
                    }
                MulOp():
                    if (is_div) {
                        "(" + expr2str(left, true, false) + " * " + expr2str(right, true, false) + ")";
                    } else {
                        expr2str(left, true, false) + " * " + expr2str(right, true, false);
                    }
                DivOp(): expr2str(left, false, true) + " / " + expr2str(right, false, true);
            };
        }
    }
}

parse(str: string) {
    makeSub = \exprs: [flow] -> {
        fold(exprs[1], exprs[0], \acc, x -> Binary(acc, x, SubOp()));
    };

    makeDiv = \exprs: [flow] -> {
        fold(exprs[1], exprs[0], \acc, x -> Binary(acc, x, DivOp()));
    };

    parsic(
        compilePegGrammar("#include labs/lab10.lingo"),
        str,
        SemanticActions(
            setTree(
                setTree(
                    defaultPegActions.t,
                    "makeSub",
                    makeSub
                ),
                "makeDiv",
                makeDiv
            )
        )
    );
}

parseRules(rule: string) -> MyRule {
    index = strFindFirstOf(rule, "=");

    MyRule(parse(strLeft(rule, index)), parse(strRight(rule, index+1)));
}


main() {
    expression = "x + y + 1 + y + x";

    rules = [
        "x+0=x",
        "x-x=0",
        "y+x=x+y",
        "x+x=2*x",
        "a+b+c=b+c+a"
    ];
    
    rulesArr = map(rules, parseRules);

    r = simplify(parse(expression), rulesArr);
    println(expr2str(r, false, false));
}